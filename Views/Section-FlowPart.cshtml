@using OrchardCore.ContentManagement
@using OrchardCore.Flows.Models
@using OrchardCore.Flows.ViewModels
@using Moov2.OrchardCore.Widgets.Models;
@using OrchardCore.Mvc.Utilities

@model FlowPartViewModel
@inject OrchardCore.ContentManagement.Display.IContentItemDisplayManager ContentItemDisplayManager

@{
    var htmlAttributesPart = Model.FlowPart.ContentItem.As<HtmlAttributesPart>();

    var hasCssClasses = !string.IsNullOrWhiteSpace(htmlAttributesPart.CssClasses);
    var hasId = !string.IsNullOrWhiteSpace(htmlAttributesPart.Id);
}

<section @(hasId ? $"id={htmlAttributesPart.Id}" : "") @(hasCssClasses ? $"class={htmlAttributesPart.CssClasses}" : "")>
    @foreach (var widget in Model.FlowPart.Widgets)
    {
        var widgetContent = await ContentItemDisplayManager.BuildDisplayAsync(widget, Model.BuildPartDisplayContext.Updater, Model.BuildPartDisplayContext.DisplayType, Model.BuildPartDisplayContext.GroupId);
        var flowMetadata = widget.As<FlowMetadata>();

        if (flowMetadata != null)
        {
            widgetContent.Classes.Add("widget");
            widgetContent.Classes.Add("widget-" + widget.ContentItem.ContentType.HtmlClassify());
            widgetContent.Classes.Add("widget-align-" + flowMetadata.Alignment.ToString().ToLowerInvariant());
            widgetContent.Classes.Add("widget-size-" + flowMetadata.Size);
        }

        @await DisplayAsync(widgetContent)
    }
</section>